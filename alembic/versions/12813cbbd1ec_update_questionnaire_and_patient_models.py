"""update_questionnaire_and_patient_models

Revision ID: 12813cbbd1ec
Revises: 2d133919a49f
Create Date: 2025-08-19 15:29:44.301755

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '12813cbbd1ec'
down_revision: Union[str, None] = '2d133919a49f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_optional_q_patient'), table_name='optional_questionnaires')
    op.drop_index(op.f('idx_optional_q_submitted_at'), table_name='optional_questionnaires')
    op.drop_index(op.f('ix_optional_questionnaires_patient_id'), table_name='optional_questionnaires')
    op.drop_table('optional_questionnaires')
    op.add_column('mandatory_questionnaires', sa.Column('past_psychiatric_diagnosis', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('past_psychiatric_treatment', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('hospitalizations', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('ect_history', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('medication_allergies', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('otc_supplements', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('medication_adherence', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('medical_history_summary', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('chronic_illnesses', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('neurological_problems', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('head_injury', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('seizure_history', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('pregnancy_status', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('alcohol_use', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('drug_use', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('prescription_drug_abuse', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('last_use_date', sa.String(length=100), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('substance_treatment', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('tobacco_use', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('family_mental_health_history', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('family_mental_health_stigma', sa.String(length=50), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('cultural_background', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('cultural_beliefs', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('spiritual_supports', sa.Text(), nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('is_complete', sa.Boolean(), nullable=False))
    op.alter_column('mandatory_questionnaires', 'chief_complaint',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('mandatory_questionnaires', 'current_medications',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_index('idx_mandatory_q_complete', 'mandatory_questionnaires', ['is_complete'], unique=False)
    op.drop_column('mandatory_questionnaires', 'past_surgeries')
    op.drop_column('mandatory_questionnaires', 'past_conditions')
    op.drop_column('mandatory_questionnaires', 'family_history')
    op.add_column('patient_history', sa.Column('medical_summary', sa.Text(), nullable=True))
    op.add_column('patient_history', sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True))
    op.drop_index(op.f('idx_patient_history_complete'), table_name='patient_history')
    op.drop_index(op.f('idx_patient_history_timestamp'), table_name='patient_history')
    op.create_index('idx_patient_history_updated', 'patient_history', ['last_updated'], unique=False)
    op.drop_column('patient_history', 'ect_history')
    op.drop_column('patient_history', 'last_use_date')
    op.drop_column('patient_history', 'cultural_background')
    op.drop_column('patient_history', 'tobacco_use')
    op.drop_column('patient_history', 'current_meds')
    op.drop_column('patient_history', 'spiritual_supports')
    op.drop_column('patient_history', 'completion_timestamp')
    op.drop_column('patient_history', 'medical_history_summary')
    op.drop_column('patient_history', 'drug_use')
    op.drop_column('patient_history', 'neurological_problems')
    op.drop_column('patient_history', 'med_allergies')
    op.drop_column('patient_history', 'otc_supplements')
    op.drop_column('patient_history', 'medication_adherence')
    op.drop_column('patient_history', 'past_psych_dx')
    op.drop_column('patient_history', 'is_complete')
    op.drop_column('patient_history', 'pregnancy_status')
    op.drop_column('patient_history', 'substance_treatment')
    op.drop_column('patient_history', 'alcohol_use')
    op.drop_column('patient_history', 'cultural_beliefs')
    op.drop_column('patient_history', 'sections_completed')
    op.drop_column('patient_history', 'prescription_drug_abuse')
    op.drop_column('patient_history', 'past_psych_treatment')
    op.drop_column('patient_history', 'family_mental_health_stigma')
    op.drop_column('patient_history', 'hospitalizations')
    op.drop_column('patient_history', 'head_injury')
    op.drop_column('patient_history', 'seizure_history')
    op.drop_column('patient_history', 'chronic_illnesses')
    op.drop_index(op.f('idx_patient_preferences_budget'), table_name='patient_preferences')
    op.drop_index(op.f('idx_patient_preferences_city'), table_name='patient_preferences')
    op.drop_column('patient_preferences', 'therapy_preferences')
    op.drop_column('patient_preferences', 'location_preferences')
    op.drop_column('patient_preferences', 'specialist_preferences')
    op.drop_column('patient_preferences', 'preferred_city')
    op.drop_column('patient_preferences', 'financial_preferences')
    op.drop_column('patient_preferences', 'availability_preferences')
    op.drop_column('patient_preferences', 'priority_weights')
    op.drop_column('patient_preferences', 'cultural_preferences')
    op.add_column('patient_presenting_concerns', sa.Column('severity_level', sa.Enum('EMERGENCY', 'URGENT', 'STANDARD', 'FLEXIBLE', name='urgencylevelenum'), nullable=True))
    op.drop_index(op.f('idx_presenting_concerns_priority'), table_name='patient_presenting_concerns')
    op.drop_column('patient_presenting_concerns', 'hpi_triggers')
    op.drop_column('patient_presenting_concerns', 'presenting_onset')
    op.drop_column('patient_presenting_concerns', 'social_activities')
    op.drop_column('patient_presenting_concerns', 'hpi_severity')
    op.drop_column('patient_presenting_concerns', 'total_questions_asked')
    op.drop_column('patient_presenting_concerns', 'priority_level')
    op.drop_column('patient_presenting_concerns', 'hpi_onset')
    op.drop_column('patient_presenting_concerns', 'hpi_impact_work')
    op.drop_column('patient_presenting_concerns', 'hpi_prior_episodes')
    op.drop_column('patient_presenting_concerns', 'function_ADL')
    op.drop_column('patient_presenting_concerns', 'session_notes')
    op.drop_column('patient_presenting_concerns', 'hpi_impact_relationships')
    op.drop_column('patient_presenting_concerns', 'hpi_course')
    op.drop_column('patient_presenting_concerns', 'hpi_duration')
    op.drop_column('patient_presenting_concerns', 'hpi_frequency')
    op.add_column('patient_risk_assessment', sa.Column('risk_summary', sa.Text(), nullable=True))
    op.drop_index(op.f('idx_risk_assessment_type'), table_name='patient_risk_assessment')
    op.drop_column('patient_risk_assessment', 'assessment_type')
    op.drop_column('patient_risk_assessment', 'follow_up_timeframe')
    op.drop_column('patient_risk_assessment', 'homicidal_thoughts')
    op.drop_column('patient_risk_assessment', 'self_harm_history')
    op.drop_column('patient_risk_assessment', 'follow_up_required')
    op.drop_column('patient_risk_assessment', 'risk_value')
    op.drop_column('patient_risk_assessment', 'suicide_intent')
    op.drop_column('patient_risk_assessment', 'suicide_ideation')
    op.drop_column('patient_risk_assessment', 'past_attempts')
    op.drop_column('patient_risk_assessment', 'suicide_plan')
    op.drop_column('patient_risk_assessment', 'protective_factors')
    op.drop_column('patient_risk_assessment', 'risk_reason')
    op.drop_column('patient_risk_assessment', 'access_means')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('patient_risk_assessment', sa.Column('access_means', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('risk_reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('protective_factors', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('suicide_plan', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('past_attempts', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('suicide_ideation', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('suicide_intent', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('risk_value', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('follow_up_required', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('self_harm_history', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('homicidal_thoughts', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('follow_up_timeframe', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('patient_risk_assessment', sa.Column('assessment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_risk_assessment_type'), 'patient_risk_assessment', ['assessment_type'], unique=False)
    op.drop_column('patient_risk_assessment', 'risk_summary')
    op.add_column('patient_presenting_concerns', sa.Column('hpi_frequency', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_duration', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_course', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_impact_relationships', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('session_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('function_ADL', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_prior_episodes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_impact_work', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_onset', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('priority_level', postgresql.ENUM('EMERGENCY', 'URGENT', 'STANDARD', 'FLEXIBLE', name='urgencylevelenum'), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('total_questions_asked', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_severity', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('social_activities', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('presenting_onset', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('patient_presenting_concerns', sa.Column('hpi_triggers', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_presenting_concerns_priority'), 'patient_presenting_concerns', ['priority_level'], unique=False)
    op.drop_column('patient_presenting_concerns', 'severity_level')
    op.add_column('patient_preferences', sa.Column('cultural_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('priority_weights', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('availability_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('financial_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('preferred_city', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('patient_preferences', sa.Column('specialist_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('location_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_preferences', sa.Column('therapy_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.create_index(op.f('idx_patient_preferences_city'), 'patient_preferences', ['preferred_city'], unique=False)
    op.create_index(op.f('idx_patient_preferences_budget'), 'patient_preferences', ['max_budget'], unique=False)
    op.add_column('patient_history', sa.Column('chronic_illnesses', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('seizure_history', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('head_injury', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('hospitalizations', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('family_mental_health_stigma', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('past_psych_treatment', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('prescription_drug_abuse', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('sections_completed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_history', sa.Column('cultural_beliefs', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('alcohol_use', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('substance_treatment', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('pregnancy_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('is_complete', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('past_psych_dx', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('medication_adherence', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('otc_supplements', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('med_allergies', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('neurological_problems', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('drug_use', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('medical_history_summary', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('completion_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('spiritual_supports', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('current_meds', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('patient_history', sa.Column('tobacco_use', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('cultural_background', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('last_use_date', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('patient_history', sa.Column('ect_history', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index('idx_patient_history_updated', table_name='patient_history')
    op.create_index(op.f('idx_patient_history_timestamp'), 'patient_history', ['completion_timestamp'], unique=False)
    op.create_index(op.f('idx_patient_history_complete'), 'patient_history', ['is_complete'], unique=False)
    op.drop_column('patient_history', 'last_updated')
    op.drop_column('patient_history', 'medical_summary')
    op.add_column('mandatory_questionnaires', sa.Column('family_history', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('past_conditions', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('mandatory_questionnaires', sa.Column('past_surgeries', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index('idx_mandatory_q_complete', table_name='mandatory_questionnaires')
    op.alter_column('mandatory_questionnaires', 'current_medications',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('mandatory_questionnaires', 'chief_complaint',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('mandatory_questionnaires', 'is_complete')
    op.drop_column('mandatory_questionnaires', 'spiritual_supports')
    op.drop_column('mandatory_questionnaires', 'cultural_beliefs')
    op.drop_column('mandatory_questionnaires', 'cultural_background')
    op.drop_column('mandatory_questionnaires', 'family_mental_health_stigma')
    op.drop_column('mandatory_questionnaires', 'family_mental_health_history')
    op.drop_column('mandatory_questionnaires', 'tobacco_use')
    op.drop_column('mandatory_questionnaires', 'substance_treatment')
    op.drop_column('mandatory_questionnaires', 'last_use_date')
    op.drop_column('mandatory_questionnaires', 'prescription_drug_abuse')
    op.drop_column('mandatory_questionnaires', 'drug_use')
    op.drop_column('mandatory_questionnaires', 'alcohol_use')
    op.drop_column('mandatory_questionnaires', 'pregnancy_status')
    op.drop_column('mandatory_questionnaires', 'seizure_history')
    op.drop_column('mandatory_questionnaires', 'head_injury')
    op.drop_column('mandatory_questionnaires', 'neurological_problems')
    op.drop_column('mandatory_questionnaires', 'chronic_illnesses')
    op.drop_column('mandatory_questionnaires', 'medical_history_summary')
    op.drop_column('mandatory_questionnaires', 'medication_adherence')
    op.drop_column('mandatory_questionnaires', 'otc_supplements')
    op.drop_column('mandatory_questionnaires', 'medication_allergies')
    op.drop_column('mandatory_questionnaires', 'ect_history')
    op.drop_column('mandatory_questionnaires', 'hospitalizations')
    op.drop_column('mandatory_questionnaires', 'past_psychiatric_treatment')
    op.drop_column('mandatory_questionnaires', 'past_psychiatric_diagnosis')
    op.create_table('optional_questionnaires',
    sa.Column('patient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('submitted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('processed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('optional_questionnaires_patient_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('optional_questionnaires_pkey'))
    )
    op.create_index(op.f('ix_optional_questionnaires_patient_id'), 'optional_questionnaires', ['patient_id'], unique=False)
    op.create_index(op.f('idx_optional_q_submitted_at'), 'optional_questionnaires', ['submitted_at'], unique=False)
    op.create_index(op.f('idx_optional_q_patient'), 'optional_questionnaires', ['patient_id'], unique=False)
    # ### end Alembic commands ###
